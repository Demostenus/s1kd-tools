.\" Automatically generated by Pandoc 2.3.1
.\"
.TH "s1kd\-appcheck" "1" "2019\-06\-06" "" "s1kd\-tools"
.hy
.SH NAME
.PP
s1kd\-appcheck \- Validate applicability of S1000D CSDB objects
.SH SYNOPSIS
.IP
.nf
\f[C]
s1kd\-appcheck\ [options]\ [<object>...]
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[I]s1kd\-appcheck\f[] tool validates the applicability of S1000D
CSDB objects, detecting potential errors that could occur when the
object is filtered.
.PP
There are four modes:
.TP
.B Basic (no argument)
Check whether all product attributes, conditions, and their values used
by objects are defined in the ACT and CCT.
Specifying the \-c option in any other mode also performs this check.
.RS
.RE
.TP
.B Products (\-p)
Check that objects are valid for all product instances defined in the
PCT.
.RS
.RE
.TP
.B All (\-a)
Check that objects are valid for all possible combinations of product
attribute and condition values, as defined in the ACT and CCT.
.RS
.RE
.TP
.B Standalone (\-s)
Check that objects are valid for all possible combinations of product
attribute and condition values that are used within the object.
.RS
.RE
.PP
The s1kd\-instance and s1kd\-validate tools are used by default to
perform the actual validation.
.SH OPTIONS
.TP
.B \-A, \-\-act <file>
Specify the ACT to read product attributes from, and to use to find the
CCT or PCT.
This will override the ACT reference within the individual objects being
validated.
.RS
.RE
.TP
.B \-a, \-\-all
Validate objects against all possible combinations of relevant product
attribute and condition values as defined in the ACT and CCT.
Relevant product attributes and conditions are those that are used by an
object with any value.
.RS
.RE
.TP
.B \-b, \-\-brexcheck
Validate objects with a BREX check (using the s1kd\-brexcheck tool) in
addition to the schema check.
.RS
.RE
.TP
.B \-C, \-\-cct <file>
Specify the CCT to read conditions from.
This will override the CCT reference within the ACT.
.RS
.RE
.TP
.B \-c, \-\-strict
Check whether product attributes and conditions used by an object are
declared in the ACT and CCT respectively.
.RS
.RE
.TP
.B \-d, \-\-dir <dir>
The directory to start searching for ACT/CCT/PCT data modules in.
By default, the current directory is used.
.RS
.RE
.TP
.B \-e, \-\-exec <cmd>
The commands used to validate objects.
Multiple commands can be used by specifying this option multiple times.
The objects will be passed to each command on stdin, and the exit status
of the command will be used to determine if the object is valid (with a
non\-zero exit status indicating it is invalid).
This overrides the default commands (s1kd\-validate, and s1kd\-brexcheck
if \-b is specified).
.RS
.RE
.TP
.B \-f, \-\-filenames
Print the filenames of invalid objects.
.RS
.RE
.TP
.B \-h, \-?, \-\-help
Show help/usage message.
.RS
.RE
.TP
.B \-k, \-\-args <args>
The arguments to the s1kd\-instance tool when filtering objects prior to
validation.
.RS
.RE
.TP
.B \-l, \-\-list
Treat input as a list of CSDB objects to validate.
.RS
.RE
.TP
.B \-N, \-\-omit\-issue
Assume that the issue/inwork numbers are omitted from object filenames
(they were created with the \-N option).
.RS
.RE
.TP
.B \-o, \-\-output\-valid
Output valid CSDB objects to stdout.
.RS
.RE
.TP
.B \-P, \-\-pct <file>
Specify the PCT to read product instances from.
This will override the PCT reference in the ACT.
.RS
.RE
.TP
.B \-p, \-\-products
Validate objects against the defined product instances within the PCT.
.RS
.RE
.TP
.B \-q, \-\-quiet
Quiet mode.
Error messages will not be printed.
.RS
.RE
.TP
.B \-r, \-\-recursive
Search for the ACT/CCT/PCT recursively.
.RS
.RE
.TP
.B \-s, \-\-standalone
Perform a standalone applicability check without an ACT, CCT, or PCT,
using only the applicability property values contained in each object.
.RS
.RE
.TP
.B \-T, \-\-summary
Print a summary of the check after it completes, including statistics on
the number of objects that passed/failed the check.
.RS
.RE
.TP
.B \-v, \-\-verbose
Verbose output.
Specify multiple times to increase the verbosity.
.RS
.RE
.TP
.B \-x, \-\-xml
Print an XML report of the check.
.RS
.RE
.TP
.B \-~, \-\-dependencies
Check with CCT dependency tests added to assertions which use the
dependant values.
.RS
.RE
.TP
.B \-\-version
Show version information.
.RS
.RE
.TP
.B <object>...
Object(s) to validate.
.RS
.RE
.PP
In addition, the following options enable features of the XML parser
that are disabled as a precaution by default:
.TP
.B \-\-dtdload
Load the external DTD.
.RS
.RE
.TP
.B \-\-net
Allow network access to load external DTD and entities.
.RS
.RE
.TP
.B \-\-noent
Resolve entities.
.RS
.RE
.TP
.B \-\-xinclude
Do XInclude processing.
.RS
.RE
.SH EXIT STATUS
.TP
.B 0
The check completed successfully, and all CSDB objects were valid.
.RS
.RE
.TP
.B 1
The check completed successfully, but some CSDB objects were invalid.
.RS
.RE
.TP
.B 2
One or more CSDB objects could not be read.
.RS
.RE
.SH EXAMPLE
.PP
Consider the following data module snippet:
.IP
.nf
\f[C]
<dmodule>
\&...
<applic>
<displayText>
<simplePara>All</simplePara>
</displayText>
</applic>
\&...
<referencedApplicGroup>
<applic\ id="app\-VersionB">
<assert\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValues="B"/>
</applic>
</referencedApplicGroup>
\&...
<levelledPara\ id="par\-0001"\ applicRefId="app\-VersionB">
<title>Features\ of\ version\ B</title>
<para>...</para>
</levelledPara>
\&...
<levelledPara>
<title>More\ information</title>
<para>...</para>
<para>Refer\ to\ <internalRef\ internalRefId="par\-0001"/>.</para>
</levelledPara>
\&...
</dmodule>
\f[]
.fi
.PP
And consider this snippet of the PCT associated with the above data
module:
.IP
.nf
\f[C]
<productCrossRefTable>
<product\ id="Version_A">
<assign\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValue="A"/>
</product>
<product\ id="Version_B">
<assign\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValue="B"/>
</product>
</productCrossRefTable>
\f[]
.fi
.PP
There are two versions of the product, A and B, and the data module is
meant to apply to both.
.PP
By itself, the data module is valid:
.IP
.nf
\f[C]
$\ s1kd\-validate\ \-v\ <DM>
s1kd\-validate:\ SUCCESS:\ <DM>\ validates\ against\ schema\ <url>
\f[]
.fi
.PP
Checking it with this tool, however, reveals an issue:
.IP
.nf
\f[C]
$\ s1kd\-appcheck\ \-p\ <DM>
s1kd\-appcheck:\ ERROR:\ <DM>\ is\ invalid\ for\ product\ Version_A
\f[]
.fi
.PP
When the data module is filtered for version A, the first levelled
paragraph will be removed, which causes the reference to it in the
second levelled paragraph to become broken.
.SH AUTHORS
khzae.net.
