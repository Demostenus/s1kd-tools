.\" Automatically generated by Pandoc 2.3.1
.\"
.TH "s1kd\-aspp" "1" "2019\-06\-13" "" "s1kd\-tools"
.hy
.SH NAME
.PP
s1kd\-aspp \- Applicability statement preprocessor
.SH SYNOPSIS
.IP
.nf
\f[C]
s1kd\-aspp\ \-h?
s1kd\-aspp\ \-D
s1kd\-aspp\ \-g\ [\-A\ <ACT>]\ [\-C\ <CCT>]\ [\-d\ <dir>]\ [\-F\ <fmt>]\ [\-G\ <XSL>]
\ \ \ \ \ \ \ \ \ \ \ \ \ [\-cfklNrv]\ [<object>...]
s1kd\-aspp\ \-p\ [\-a\ <ID>]\ [\-flv]\ [<object>...]
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[I]s1kd\-aspp\f[] tool has two main functions:
.IP \[bu] 2
Generates display text for applicability statements.
The text is derived from the logic described by the \f[C]assert\f[] and
\f[C]evaluate\f[] elements.
.IP \[bu] 2
Preprocesses "semantic" applicability statements in a data module to
produce "presentation" applicability statements which are simpler to
parse in an XSLT stylesheet.
.PP
"Semantic" applicability statements are those entered by the author to
encode the applicability of elements within a data module.
"Presentation" applicability statements are those that are actually
displayed in page\-oriented output, also referred to as the
"human\-readable" statements.
.PP
The applicability in the resulting XML is longer semantically correct,
but an XSLT stylesheet can simply place a statement on any element with
attribute \f[C]applicRefId\f[] without needing to consider inherited
applicability statements on elements without the attribute.
.SH OPTIONS
.TP
.B \-A, \-\-act <ACT>
Add an ACT to use when generating display text for product attributes.
Multiple ACT data modules can be used by specifying this option multiple
times.
.RS
.RE
.TP
.B \-a, \-\-id <ID>
The ID to use for the inline applicability annotation representing the
whole data module\[aq]s applicability.
Default is "app\-0000".
.RS
.RE
.TP
.B \-C, \-\-cct <CCT>
Add a CCT to use when generating display text for conditions.
Multiple CCT data modules can be used by specifying this option multiple
times.
.RS
.RE
.TP
.B \-c, \-\-search
Search for the ACT and CCT referenced by each data module, and add them
to the list of ACTs/CCTs to use when generating display text for that
data module.
.RS
.RE
.TP
.B \-D, \-\-dump
Dump the built\-in XSLT used to generate display text for applicability
statements.
.RS
.RE
.TP
.B \-d, \-\-dir <dir>
Directory to start searching for ACT/CCT data modules in.
By default, the current directory is used.
.RS
.RE
.TP
.B \-F, \-\-format <fmt>
Use a custom format string to generate display text.
.RS
.RE
.TP
.B \-f, \-\-overwrite
Overwrite input data module(s) rather than outputting to stdout.
.RS
.RE
.TP
.B \-G, \-\-xsl <XSLT>
Use custom XSLT to generate display text for applicability statements.
.RS
.RE
.TP
.B \-g, \-\-generate
Generate display text for applicability statements.
.RS
.RE
.TP
.B \-h, \-?, \-\-help
Show help/usage message.
.RS
.RE
.TP
.B \-k, \-\-keep
When generating display text, do not overwrite existing display text on
statements, only generate display text for statements which have none.
.RS
.RE
.TP
.B \-l, \-\-list
Treat input (stdin or arguments) as lists of filenames of objects,
rather than objects themselves.
.RS
.RE
.TP
.B \-N, \-\-omit\-issue
Assume that the filenames for the ACT and CCT do not include issue info,
i.e.
they were created using the \-N option of the s1kd\-newdm tool.
.RS
.RE
.TP
.B \-p, \-\-presentation
Preprocess applicability statements to produce "presentation"
applicability statements which are simpler to parse in an XSLT
stylesheet.
The applicability in the resulting XML is no longer semantically
correct.
.RS
.RE
.TP
.B \-r, \-\-recursive
Search for ACT/CCT data modules recursively.
.RS
.RE
.TP
.B \-v, \-\-verbose
Verbose output.
.RS
.RE
.TP
.B \-\-version
Show version information.
.RS
.RE
.TP
.B <object>...
The object(s) to preprocess.
This can include both individual objects and combined files such as
those produced by s1kd\-flatten(1).
.RS
.RE
.PP
In addition, the following options enable features of the XML parser
that are disabled as a precaution by default:
.TP
.B \-\-dtdload
Load the external DTD.
.RS
.RE
.TP
.B \-\-net
Allow network access to load external DTD and entities.
.RS
.RE
.TP
.B \-\-noent
Resolve entities.
.RS
.RE
.TP
.B \-\-xinclude
Do XInclude processing.
.RS
.RE
.SH EXAMPLES
.SS Generating display text
.PP
The built\-in XSLT for generating display text follows the guidance in
Chap 7.8 of the S1000D 4.2 specification.
For example, given the following:
.IP
.nf
\f[C]
<applic>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</applic>
\f[]
.fi
.PP
The resulting XML would contain:
.IP
.nf
\f[C]
<applic>
<displayText>
<simplePara>prodversion:\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</applic>
\f[]
.fi
.PP
If ACTs or CCTs are supplied which define display names for a property,
this will be used instead of the ident.
For example, the ACT defines the display name for the
"\f[C]prodversion\f[]" product attribute:
.IP
.nf
\f[C]
<productAttribute\ id="prodversion">
<name>Product\ version</name>
<displayName>Version</displayName>
<descr>The\ version\ of\ the\ product.</descr>
<enumeration\ applicPropertyValues="A|B|C"/>
</productAttribute>
\f[]
.fi
.PP
When supplied with the \-A option:
.IP
.nf
\f[C]
$\ s1kd\-aspp\ \-g\ \-A\ <ACT>\ <DM>
\f[]
.fi
.PP
The resulting XML would instead contain:
.IP
.nf
\f[C]
<applic>
<displayText>
<simplePara>Version:\ A</simplePara>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</displayText>
</applic>
\f[]
.fi
.PP
The methods for generating display text can be changed by supplying a
custom XSLT script with the \-G option.
The \-D option can be used to dump the built\-in XSLT as a starting
point for a custom script.
An identity template is automatically added to the script, equivalent to
the following:
.IP
.nf
\f[C]
<xsl:template\ match="\@*|node()">
<xsl:copy>
<xsl:apply\-templates\ select="\@*|node()"/>
</xsl:copy>
</xsl:template>
\f[]
.fi
.PP
This means any elements or attributes not matched by a more specific
template in the script are copied.
.SS Display text format string (\-F)
.PP
The \-F option allows for simple customizations to generated display
text without needing to create a custom XSLT script (\-G).
The string determines the format of the display text of each
\f[C]<assert>\f[] element in the annotation.
.PP
The following variables can be used within the format string:
.TP
.B %name%
The name of the property.
.RS
.RE
.TP
.B %values%
The applicable value(s) of the property.
.RS
.RE
.PP
For example:
.IP
.nf
\f[C]
$\ s1kd\-aspp\ \-g\ <DM>
\&...
<applic>
<displayText>
<simplePara>Version:\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValues="A"/>
</applic>
\&...

$\ s1kd\-aspp\ \-F\ \[aq]%name%\ =\ %values%\[aq]\ \-g\ <DM>
\&...
<applic>
<displayText>
<simplePara>Version\ =\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValues="A"/>
</applic>
\&...
\f[]
.fi
.SS Creating presentation applicability statements
.PP
Given the following:
.IP
.nf
\f[C]
<dmodule>
<identAndStatusSection>
<dmAddress>...</dmAddress>
<dmStatus>
\&...
<applic>
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
\&...
</dmStatus>
</identAndStatusSection>
<content>
<referencedApplicGroup>
<applic\ id="app\-B">
<displayText>
<simplePara>B</simplePara>
</displayText>
</applic>
</referencedApplicGroup>
<procedure>
<preliminaryRqmts>...</preliminaryRqmts>
<mainProcedure>
<proceduralStep>
<para>This\ step\ is\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ also\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep>
<para>This\ step\ is\ also\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
</mainProcedure>
<closeRqmts>...</closeRqmts>
</procedure>
</content>
</dmodule>
\f[]
.fi
.PP
Applicability statements should be displayed whenever applicability
changes:
.IP "1." 3
This step is applicable to A or B.
.IP "2." 3
\f[I]Applicable to: B\f[]
.RS 4
.PP
This step is applicable to B only.
.RE
.IP "3." 3
This step is also applicable to B only.
.IP "4." 3
\f[I]Applicable to: A or B\f[]
.RS 4
.PP
This step is also applicable to A or B.
.RE
.PP
There are two parts which are difficult to do in an XSLT stylesheet:
.IP \[bu] 2
No statement is shown on Step 3 despite having attribute
\f[C]applicRefId\f[] because the applicability has not changed since the
last statement on Step 2.
.IP \[bu] 2
A statement is shown on Step 4 despite not having attribute
\f[C]applicRefId\f[] because the applicability has changed back to that
of the whole data module.
.PP
Using the s1kd\-aspp tool, the above XML would produce the following
output:
.IP
.nf
\f[C]
<dmodule>
<identAndStatusSection>
<dmAddress>...</dmAddress>
<dmStatus>
\&...
<applic>
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
\&...
</dmStatus>
</identAndStatusSection>
<content>
<referencedApplicGroup>
<applic\ id="app\-B">
<displayText>
<simplePara>B</simplePara>
</displayText>
</applic>
<applic\ id="app\-0000">
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
</referencedApplicGroup>
<procedure>
<preliminaryRqmts>...</preliminaryRqmts>
<mainProcedure>
<proceduralStep>
<para>This\ step\ is\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep>
<para>This\ step\ is\ also\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-0000">
<para>This\ step\ is\ also\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
</mainProcedure>
</procedure>
</content>
</dmodule>
\f[]
.fi
.PP
With attribute \f[C]applicRefId\f[] only on those elements where a
statement should be shown, and an additional inline applicability to
represent the whole data module\[aq]s applicability.
This XML is semantically incorrect but easier for a stylesheet to
transform for page\-oriented output.
.SH AUTHORS
khzae.net.
